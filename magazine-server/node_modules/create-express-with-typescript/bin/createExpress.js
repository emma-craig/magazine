#!/usr/bin/env node

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');
const stdout = process.stdout
const stdin = process.stdin
const stderr = process.stderr
const rdl = require("readline")

class selectOption {

    constructor(opts = {
        question: "",
        option: [],
        answer: [],
        opinter: '>',
        color: 'blue'

    }) {
        let { question, options, answers, pointer, color } = opts
        this.question = question
        this.options = options
        this.answers = answers
        this.pointer = pointer
        this._color = color
        this.input
        this.cursorLocs = {
            x: 0,
            y: 0
        }

    }
    start() {
        if (process.argv.length < 3) {
            console.log('You have to provide a name to your app.');
            console.log('For example :');
            console.log('    npx create-my-boilerplate my-app');
            process.exit(1);
        }
        stdout.write(this.question + '\n')
        for (let opt = 0; opt < this.options.length; opt++) {
            this.options[opt] = this.pointer + " " + this.options[opt]
            if (opt === this.options.length - 1) {
                this.input = this.options.length - 1
                this.options[opt] += '\n'
                stdout.write(this.color(this.options[opt], this._color))
            } else {
                this.options[opt] += '\n'
                stdout.write(this.options[opt])
            }
            this.cursorLocs.y = opt + 1
        }
        stdin.setRawMode(true)
        stdin.resume()
        stdin.setEncoding('utf-8')
        this.hideCursor()
        stdin.on("data", this.pn(this))

    }
    hideCursor() {
        stdout.write("\x1B[?25l")
    }
    pn(self) {
        return (c) => {
            switch (c) {
                case '\u0004': // Ctrl-d
                case '\r':
                case '\n':
                    return self.enter()
                case '\u0003': // Ctrl-c
                    return self.ctrlc()
                case '\u001b[A':
                    return self.upArrow()
                case '\u001b[B':
                    return self.downArrow()
            }
        }
    }
    upArrow() {
        let y = this.cursorLocs.y
        rdl.cursorTo(stdout, 0, y)
        stdout.write(this.options[y - 1])
        if (this.cursorLocs.y === 1) {
            this.cursorLocs.y = this.options.length
        } else {
            this.cursorLocs.y--
        }
        y = this.cursorLocs.y
        rdl.cursorTo(stdout, 0, y)
        stdout.write(this.color(this.options[y - 1], this._color))
        this.input = y - 1
    }
    downArrow() {
        let y = this.cursorLocs.y
        rdl.cursorTo(stdout, 0, y)
        stdout.write(this.options[y - 1])
        if (this.cursorLocs.y === this.options.length) {
            this.cursorLocs.y = 1
        } else {
            this.cursorLocs.y++
        }
        y = this.cursorLocs.y
        rdl.cursorTo(stdout, 0, y)
        stdout.write(this.color(this.options[y - 1], this._color))
        this.input = y - 1
    }
    color(str, colorName = "yellow") {
        const colors = {
            "yellow": [33, 89],
            "blue": [34, 89],
            "green": [32, 89],
            "cyan": [35, 89],
            "red": [31, 89],
            "magenta": [36, 89]
        }
        const _color = colors[colorName]
        const start = "\x1b[" + _color[0] + "m"
        const stop = "\x1b[" + _color[1] + "m\x1b[0m"
        return start + str + stop
    }
    enter() {
        stdin.removeListener('data', this.pn)
        stdin.setRawMode(false)
        stdin.pause()
        this.showCursor()
        rdl.cursorTo(stdout, 0, this.options.length + 1)
        this.selectedMenu(this.answers[this.input])
    }
    selectedMenu(message) {
        Express_Server(message);
        // console.log(message)
    }
    ctrlc() {
        stdin.removeListener('data', this.pn)
        stdin.setRawMode(false)
        stdin.pause()
        this.showCursor()
    }
    showCursor() {
        stdout.write("\x1B[?25h")
    }

}
const selectMenu = new selectOption({
    question: "Which Type of Express Server You Want to create.",
    options: ["Functional base Express Server", "Class Base Express Server"],
    answers: [0, 1],
    pointer: ">",
    color: "magenta"
})
selectMenu.start(); // start is a function.

// Express Server function is create a express server and install dependency.
function Express_Server(option) {
    const projectName = process.argv[2];
    const currentPath = process.cwd();
    const projectPath = path.join(currentPath, projectName);
    let git_repo;
    if (+option === 0) {
        git_repo = 'https://github.com/aadarshbabu/create-express-app'
    } else {
        git_repo = 'https://github.com/aadarshbabu/Server'
    }

    try {
        fs.mkdirSync(projectPath);
    } catch (err) {
        if (err.code === 'EEXIST') {
            console.log(`The file ${projectName} already exist in the current directory, please give it another name.`);
        } else {
            console.log(err);
        }
        process.exit(1);
    }

    async function main() {

        try {
            console.log('Downloading files...');
            execSync(`git clone --depth 1 ${git_repo} ${projectPath}`);

            process.chdir(projectPath);

            console.log('Installing dependencies...');
            const stdout = execSync('npm install');
            console.log(stdout.toString());

            // console.log('Removing useless files');
            fs.rmSync(path.join(projectPath, '.git'), { recursive: true });

            console.log(`Success! Create express app with ${projectPath}`);
            console.log(`Inside this directory you can run several command: `);

            console.log(`
            `)
            console.log("\x1b[34m", ` npm start `);
            console.log("\x1b[0m", "    Start the devlopment Server. ");
            console.log(`
            `)
            console.log("\x1b[34m", ` npm run build `);
            console.log("\x1b[0m", "    Bundal the application into static file for producation. ");
            console.log(`
            `)
            console.log("\x1b[34m", ` npm run dev `);
            console.log("\x1b[0m", "    Start Express server in devlopment mode. ");
            console.log(`
            `)
            console.log("\x1b[34m", ` npm run test `);
            console.log("\x1b[0m", "    Starts the test runner. ");
            console.log(`
            `)

            console.log(`We suggest that you begin to typing:`);
            console.log(`
            `)
            console.log("\x1b[34m", `cd`, "\x1b[0m", `${projectName}`);
            console.log("\x1b[34m", `npm start`);

        } catch (error) {
            console.log(error);
        }

    }
    main();
}
